from __future__ import annotations

import os
import asyncio
import logging
from typing import Any, Dict, Iterable
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import httpx

from aiogram.client.default import DefaultBotProperties

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# --- ENV ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
# Prefer ORCHESTRATOR_URL, fallback to legacy ORCH_URL, then default to service hostname
ORCHESTRATOR_URL = (
    os.getenv("ORCHESTRATOR_URL")
    or os.getenv("ORCH_URL")
    or "http://asb-orchestrator:8000"
)
BASE_URL = os.getenv("BASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
APP_ENV = os.getenv("APP_ENV", "prod")
ORCH_CLIENT_TIMEOUT = float(os.getenv("ORCH_CLIENT_TIMEOUT", "200.0"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# Derive webhook path from WEBHOOK_URL (or fallback)
def _derive_webhook_path(url: str | None) -> str:
    if not url:
        return f"/webhook/{TELEGRAM_TOKEN}"
    return urlparse(url).path or f"/webhook/{TELEGRAM_TOKEN}"

WEBHOOK_PATH = _derive_webhook_path(WEBHOOK_URL)

# If WEBHOOK_URL is not explicitly provided but BASE_URL exists, build it
if not WEBHOOK_URL and BASE_URL:
    WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()


# ------------- helpers -------------
TG_MESSAGE_LIMIT = 4096

async def _post_json(path: str, json: Dict[str, Any]) -> Dict[str, Any]:
    async with httpx.AsyncClient(timeout=ORCH_CLIENT_TIMEOUT) as client:
        resp = await client.post(f"{ORCHESTRATOR_URL}{path}", json=json)
        if resp.status_code == 409:
            detail = resp.json().get("detail", "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            raise RuntimeError(f"409: {detail}")
        resp.raise_for_status()
        return resp.json()

async def _get(path: str, params: Dict[str, Any]) -> Dict[str, Any]:
    async with httpx.AsyncClient(timeout=ORCH_CLIENT_TIMEOUT) as client:
        resp = await client.get(f"{ORCHESTRATOR_URL}{path}", params=params)
        if resp.status_code == 409:
            detail = resp.json().get("detail", "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            raise RuntimeError(f"409: {detail}")
        resp.raise_for_status()
        return resp.json()

def _err_text(detail: str) -> str:
    return f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {detail}"

def _chunk(text: str, size: int = TG_MESSAGE_LIMIT) -> Iterable[str]:
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–æ–∫ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
    start = 0
    while start < len(text):
        end = min(start + size, len(text))
        if end < len(text):
            nl = text.rfind("\n", start, end)
            if nl != -1 and nl > start + size // 2:
                end = nl
        yield text[start:end]
        start = end

async def send_long(message: Message, text: str):
    for part in _chunk(text):
        await message.answer(part)


# ------------- commands -------------

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>AI Study Buddy</b> ü§ñ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /study &lt;—Ç–µ–º–∞&gt; ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω\n"
        "‚Ä¢ /summary ‚Äî –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ\n"
        "‚Ä¢ /quiz ‚Äî –∫–≤–∏–∑ 5‚Äì7 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ /progress ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n"
        "‚Ä¢ /study –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –Ω–∞—á–Ω—ë–º –ø–ª–∞–Ω\n"
        "‚Ä¢ /summary ‚Äî –≤–µ—Ä–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n"
        "‚Ä¢ /quiz ‚Äî –∑–∞–ø—É—â—É –∫–≤–∏–∑\n"
        "‚Ä¢ /progress ‚Äî –ø–æ–∫–∞–∂—É –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

@dp.message(Command("study"))
async def cmd_study(message: Message):
    text = (message.text or "").strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ —Ç–µ–º—É: <code>/study –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</code>")
        return

    topic = parts[1]
    user_id = message.from_user.id

    payload = {
        "topic": topic,
        "depth": "basic",
        "duration_days": 7,
        "daily_time_minutes": 20,
        "user_id": user_id,
    }

    await message.answer("üß† –ü–ª–∞–Ω–∏—Ä—É—é –æ–±—É—á–µ–Ω–∏–µ‚Ä¶")
    try:
        data = await _post_json("/study", payload)
        doc_url = data.get("doc_url") or "‚Äî"
        await message.answer(
            f"‚úÖ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤!\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_url}\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å /summary –∏–ª–∏ /quiz"
        )
    except RuntimeError as e:
        if str(e).startswith("409:"):
            await message.answer(_err_text(str(e)[5:]))
        else:
            await message.answer(_err_text(str(e)))
    except httpx.HTTPError as e:
        await message.answer(_err_text(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))
    except Exception as e:
        log.exception("study failed")
        await message.answer(_err_text(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"))

@dp.message(Command("summary"))
async def cmd_summary(message: Message):
    user_id = message.from_user.id
    try:
        data = await _get("/summary", {"user_id": user_id})
        md = data.get("markdown", "")
        if not md:
            await message.answer("–ö–æ–Ω—Å–ø–µ–∫—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")
            return
        # –û—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ pre: —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ
        await send_long(message, "üìù <b>–ö–æ–Ω—Å–ø–µ–∫—Ç</b>:\n\n<pre>" + md + "</pre>")
    except RuntimeError as e:
        if str(e).startswith("409:"):
            await message.answer(_err_text(str(e)[5:]))
        else:
            await message.answer(_err_text(str(e)))
    except httpx.HTTPError as e:
        await message.answer(_err_text(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))

@dp.message(Command("quiz"))
async def cmd_quiz(message: Message):
    user_id = message.from_user.id
    try:
        data = await _get("/quiz", {"user_id": user_id, "questions_count": 6})
        qs = data.get("questions", [])
        if not qs:
            await message.answer("–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
            return
        blocks = []
        for i, q in enumerate(qs, 1):
            opts = q.get("options", [])
            block = [
                f"<b>–í–æ–ø—Ä–æ—Å {i}:</b> {q.get('q')}",
                *(f"{j+1}) {opt}" for j, opt in enumerate(opts[:4]))
            ]
            blocks.append("\n".join(block))
        await send_long(message, "üéØ <b>–ö–≤–∏–∑</b>\n\n" + "\n\n".join(blocks))
        await message.answer(
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞), –ø—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞: "
            "<code>/quiz_result —Ç–µ–º–∞|–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö|–≤—Å–µ–≥–æ</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/quiz_result ML|4|6</code>"
        )
    except RuntimeError as e:
        if str(e).startswith("409:"):
            await message.answer(_err_text(str(e)[5:]))
        else:
            await message.answer(_err_text(str(e)))
    except httpx.HTTPError as e:
        await message.answer(_err_text(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))

@dp.message(Command("quiz_result"))
async def cmd_quiz_result(message: Message):
    text = (message.text or "").strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2 or "|" not in parts[1]:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/quiz_result —Ç–µ–º–∞|–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö|–≤—Å–µ–≥–æ</code>")
        return

    try:
        topic, correct_s, total_s = parts[1].split("|")
        payload = {
            "topic": topic.strip(),
            "correct": int(correct_s),
            "total": int(total_s),
            "weak_topics": [],
        }
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/quiz_result ML|4|6</code>")
        return

    user_id = message.from_user.id
    try:
        await _post_json("/quiz/result", {"user_id": user_id, **payload})
        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ /summary –∏–ª–∏ /quiz")
    except RuntimeError as e:
        if str(e).startswith("409:"):
            await message.answer(_err_text(str(e)[5:]))
        else:
            await message.answer(_err_text(str(e)))
    except httpx.HTTPError as e:
        await message.answer(_err_text(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))

@dp.message(Command("progress"))
async def cmd_progress(message: Message):
    user_id = message.from_user.id
    try:
        data = await _get("/progress", {"user_id": user_id})
        doc = data.get("doc_url") or "‚Äî"
        await message.answer(
            "üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
            f"–ì–æ—Ç–æ–≤–æ: {data.get('completion_percent', 0)}%\n"
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {data.get('avg_score', 0)}\n"
            f"–°–ª–∞–±—ã–µ —Ç–µ–º—ã: {', '.join(data.get('weak_topics', [])) or '‚Äî'}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc}"
        )
    except RuntimeError as e:
        if str(e).startswith("409:"):
            await message.answer(_err_text(str(e)[5:]))
        else:
            await message.answer(_err_text(str(e)))
    except httpx.HTTPError as e:
        await message.answer(_err_text(f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))


# ------------- webhook server -------------

async def on_startup(app: web.Application):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ —É Telegram, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_URL
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        log.info("Webhook set to %s", WEBHOOK_URL)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ URL ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á–∏—Å—Ç–∏–º –≤–µ–±—Ö—É–∫
        await bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted (no WEBHOOK_URL).")

async def on_cleanup(app: web.Application):
    await bot.session.close()

def build_app() -> web.Application:
    app = web.Application()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø—É—Ç—å WEBHOOK_PATH
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, on_startup=on_startup, on_shutdown=None, on_cleanup=on_cleanup)
    return app


# ------------- entrypoint -------------

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π dev: –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å aiohttp-—Å–µ—Ä–≤–µ—Ä (–∑–∞ –ø—Ä–æ–∫—Å–∏ –æ—Ç–≤–µ—á–∞–µ—Ç Caddy/Nginx)
    port = int(os.getenv("PORT", "8080"))
    web.run_app(build_app(), host="0.0.0.0", port=port)

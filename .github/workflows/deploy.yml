name: Deploy to server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for version info)
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.GH_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            cd "${APP_DIR:-${{ secrets.APP_DIR }}}"

            git fetch --all --prune
            git reset --hard origin/main

            ls -la .env || true
            echo "--- docker compose up ---"

            docker compose pull || true
            docker compose up -d --build

            docker image prune -f || true

            echo "--- wait container health (asb-orchestrator) ---"
            # ждём пока health=healthy (healthcheck внутри контейнера уже настроен)
            for i in {1..30}; do
              STATUS="$(docker inspect -f '{{.State.Health.Status}}' asb-orchestrator 2>/dev/null || echo 'starting')"
              echo "status: $STATUS ($i/30)"
              if [ "$STATUS" = "healthy" ]; then
                break
              fi
              sleep 2
            done

            if [ "$(docker inspect -f '{{.State.Health.Status}}' asb-orchestrator)" != "healthy" ]; then
              echo "API FAIL: container not healthy"
              exit 1
            fi

            echo "--- in-container healthcheck ---"
            # дергаем health изнутри контейнера (порт не нужен на хосте)
            docker exec asb-orchestrator curl -fsS http://localhost:8000/health >/dev/null \
              && echo "API OK" \
              || (echo "API FAIL"; exit 1)